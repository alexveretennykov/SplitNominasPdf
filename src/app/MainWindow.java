/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;

/**
 *
 * @author Oleksandr Veretennykov
 */
public class MainWindow extends javax.swing.JFrame {

    File selectedFilePath;
    String createdFolderName;
    PDFManager pdfManager;
    String searchPatternBefore;
    String searchPatternAfter;
    String pathDirectoryInput;
    String pathDirectoryOutput;
    final String PATH_PATTERN_FILE = "./assets/Config.txt";

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        initComboBox();

        readConfigFromFile();

        checkColorTextFieldsConfig();

        selectedFilePath = null;
        pdfManager = new PDFManager();

        createdFolderName = "";
        searchPatternBefore = "";
        searchPatternAfter = "";
        pathDirectoryInput = "";
        pathDirectoryOutput = "";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new MainWindow();
                frame.setLocationRelativeTo(null);
                frame.setTitle("Separador de nóminas");
                frame.setIconImage(new ImageIcon("./assets/invoice.png").getImage());
                frame.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        btnSplitPdfFile = new javax.swing.JButton();
        btnSelectFile = new javax.swing.JButton();
        btnShowPdfFileText = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxMonth = new javax.swing.JComboBox<>();
        btnOpenOutputFolder = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldSearchPatterBefore = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldSearchPatterAfter = new javax.swing.JTextField();
        bntSaveConfig = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        bntSelectInputFolder = new javax.swing.JButton();
        btnSelectOutputFolder = new javax.swing.JButton();
        jTextFieldPathInput = new javax.swing.JTextField();
        jTextFieldPathOutput = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabelMessageResultSaveConfig = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(null);
        setName("MainFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(800, 800));

        logTextArea.setEditable(false);
        logTextArea.setColumns(1);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        btnSplitPdfFile.setText("Procesar");
        btnSplitPdfFile.setAlignmentY(0.0F);
        btnSplitPdfFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnSplitPdfFileMousePressed(evt);
            }
        });
        btnSplitPdfFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSplitPdfFileActionPerformed(evt);
            }
        });

        btnSelectFile.setText("Seleccionar PDF");
        btnSelectFile.setAlignmentY(0.0F);
        btnSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFileActionPerformed(evt);
            }
        });

        btnShowPdfFileText.setText("Mostrar texto del PDF");
        btnShowPdfFileText.setToolTipText("");
        btnShowPdfFileText.setAlignmentY(0.0F);
        btnShowPdfFileText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPdfFileTextActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("El mes de la nómina:");
        jLabel1.setAlignmentY(0.0F);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jComboBoxMonth.setAlignmentX(0.0F);
        jComboBoxMonth.setAlignmentY(0.0F);
        jComboBoxMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxMonthItemStateChanged(evt);
            }
        });

        btnOpenOutputFolder.setText("Abrir Carpeta Destino");
        btnOpenOutputFolder.setAlignmentY(0.0F);
        btnOpenOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenOutputFolderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(btnShowPdfFileText, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                        .addComponent(btnSelectFile, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                        .addComponent(jComboBoxMonth, 0, 132, Short.MAX_VALUE)
                        .addComponent(btnOpenOutputFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                    .addComponent(btnSplitPdfFile, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSelectFile)
                        .addGap(18, 18, 18)
                        .addComponent(btnShowPdfFileText)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSplitPdfFile)
                        .addGap(18, 18, 18)
                        .addComponent(btnOpenOutputFolder))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Inicio", jPanel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Configuración de las carpetas:");
        jLabel2.setToolTipText("");

        jLabel3.setText("Texto desde el principio de la línea hasta el Nombre del Trabajador:");

        jTextFieldSearchPatterBefore.setToolTipText("");
        jTextFieldSearchPatterBefore.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchPatterBeforeKeyReleased(evt);
            }
        });

        jLabel4.setText("Texto que viene justo después del Nombre y hasta el final de la línea:");
        jLabel4.setToolTipText("");

        jTextFieldSearchPatterAfter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchPatterAfterKeyReleased(evt);
            }
        });

        bntSaveConfig.setText("Guardar Configuración");
        bntSaveConfig.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                bntSaveConfigFocusLost(evt);
            }
        });
        bntSaveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSaveConfigActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Patrón de busqueda:");
        jLabel5.setToolTipText("");

        bntSelectInputFolder.setText("Seleccionar Carpeta Origen");
        bntSelectInputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSelectInputFolderActionPerformed(evt);
            }
        });

        btnSelectOutputFolder.setText("Seleccionar Carpeta Destino");
        btnSelectOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectOutputFolderActionPerformed(evt);
            }
        });

        jTextFieldPathInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPathInputKeyReleased(evt);
            }
        });

        jTextFieldPathOutput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPathOutputKeyReleased(evt);
            }
        });

        jLabel6.setText("Ruta de la carpeta origen:");

        jLabel7.setText("Ruta de la carpeta destino:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bntSaveConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)
                                .addComponent(jTextFieldSearchPatterBefore, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                                .addComponent(jTextFieldSearchPatterAfter)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bntSelectInputFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSelectOutputFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldPathInput)
                                    .addComponent(jTextFieldPathOutput)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addComponent(jLabelMessageResultSaveConfig))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(2, 2, 2)
                .addComponent(jTextFieldSearchPatterBefore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSearchPatterAfter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPathInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntSelectInputFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPathOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectOutputFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bntSaveConfig)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMessageResultSaveConfig)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Configuración", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxMonthItemStateChanged
        SimpleDateFormat dateM = new SimpleDateFormat("MM");
        int month = Integer.valueOf(dateM.format(new Date()));

        if (jComboBoxMonth.getSelectedIndex() != (month - 1)) {
            jComboBoxMonth.setBackground(Color.red);
        } else {
            jComboBoxMonth.setBackground(Color.gray);
        }
    }//GEN-LAST:event_jComboBoxMonthItemStateChanged

    // Se ejecuta antes de procesar el PDF
    // Al ejecutarse btnProcessDocumentMouseClicked, no da tiempo a escribir el 
    // texto en TextArea y se bloque hasta que finalice el proceso...
    // De momento es la unica solucion que se me ocurre
    private void btnSplitPdfFileMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSplitPdfFileMousePressed
        logTextArea.append("Procesando el PDF...\n");
    }//GEN-LAST:event_btnSplitPdfFileMousePressed

    private void jTextFieldSearchPatterAfterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchPatterAfterKeyReleased
        checkColorTextFieldsConfig();
    }//GEN-LAST:event_jTextFieldSearchPatterAfterKeyReleased

    private void jTextFieldSearchPatterBeforeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchPatterBeforeKeyReleased
        checkColorTextFieldsConfig();
    }//GEN-LAST:event_jTextFieldSearchPatterBeforeKeyReleased

    private void bntSelectInputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSelectInputFolderActionPerformed
        pathDirectoryInput = selectPathDirectory();
        jTextFieldPathInput.setText(pathDirectoryInput);
    }//GEN-LAST:event_bntSelectInputFolderActionPerformed

    private void btnSelectOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectOutputFolderActionPerformed
        pathDirectoryOutput = selectPathDirectory();
        jTextFieldPathOutput.setText(pathDirectoryOutput);
    }//GEN-LAST:event_btnSelectOutputFolderActionPerformed

    
    
    private void btnSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setPreferredSize(new Dimension(600, 500));
        
        if (pathDirectoryInput.equals("")) {
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + "/Downloads"));
        } else {
            fileChooser.setCurrentDirectory(new File(pathDirectoryInput));
        }
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        FileNameExtensionFilter pdfFilter = new FileNameExtensionFilter("PDF", "pdf");
        fileChooser.setFileFilter(pdfFilter);

        int result = fileChooser.showOpenDialog(this);

        // Guarda la Ruta del fichero seleccioando
        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFilePath = fileChooser.getSelectedFile();
            logTextArea.append("Ha seleccionado el archivo: " + selectedFilePath.getName() + "\n\n");
        }
    }//GEN-LAST:event_btnSelectFileActionPerformed

    private void btnShowPdfFileTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPdfFileTextActionPerformed
        StringBuilder sbuilder = new StringBuilder();

        if (selectedFilePath != null && selectedFilePath.length() > 0) {
            try {
                // Lee solo la primera página del PDF seleccionado
                sbuilder.append("\n*********************\n");
                sbuilder.append("**** Inicio PDF ****\n");
                sbuilder.append("*********************\n");

                sbuilder.append(pdfManager.pdfToStringFromFile(selectedFilePath, 1));

                sbuilder.append("*******************\n");
                sbuilder.append("**** FIN PDF ****\n");
                sbuilder.append("*******************\n\n");

                logTextArea.append(sbuilder.toString());
            } catch (Exception ex) {
                logTextArea.append("¡ERROR! > " + ex.getMessage());
            }
        } else {
            logTextArea.append("No hay ningún PDF seleccionado.\n\n");
        }
    }//GEN-LAST:event_btnShowPdfFileTextActionPerformed

    private void btnSplitPdfFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSplitPdfFileActionPerformed
        if (selectedFilePath != null) {
            if (selectedFilePath.getName().contains(".pdf")) {
                searchPatternBefore = jTextFieldSearchPatterBefore.getText();
                searchPatternAfter = jTextFieldSearchPatterAfter.getText();

                if (!searchPatternBefore.equals("") || !searchPatternAfter.equals("")) {
                    // Divide el PDF original en PDFs separados por páginas
                    int num = splitPdfDocument();

                    if (num > 0) {
                        logTextArea.append("PDF procesado con éxito. \nArchivos generados: " + num + "\n\n");
                        selectedFilePath = null;
                    } else {
                        logTextArea.append("PDF procesado con errores.\n\n");
                    }
                } else {
                    logTextArea.append("El patrón de busqueda está vacío.");
                }
            } else {
                logTextArea.append("Solo se admiten archivos PDF, ha seleccionado un archivo distinto a PDF.\n\n");
            }
        } else {
            logTextArea.append("No hay ningún PDF seleccionado.\n\n" + "\n\n");
        }
    }//GEN-LAST:event_btnSplitPdfFileActionPerformed

    private void btnOpenOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenOutputFolderActionPerformed
        String userName = System.getProperty("user.name");
        String nameFolder = "";

        // Comprueba si se ha creado nueva carpeta al procesar el PDF
        if (!createdFolderName.equals("")) {
            // Si se ha creado, se habre esa carpeta de Destino
            nameFolder = createdFolderName;
        } else {
            // Si no se ha creado, abre la Carpeta por defecto
            // Que puede ser la Generica 'Nominas'
            // O la que haya seleccionado el usuario
            if (pathDirectoryOutput.equals("")) {
                nameFolder = "C:/Users/" + userName + "/Documents/Nominas/";
            } else {
                nameFolder = pathDirectoryOutput;
            }
        }

        File directorio = new File(nameFolder);

        // Si no existe el directorio, se crea
        if (!directorio.exists()) {
            directorio.mkdirs();
        }

        try {
            Desktop.getDesktop().open(directorio);
        } catch (IOException ex) {
            logTextArea.append("¡ERROR! " + ex.getMessage() + "\n\n");
        }
    }//GEN-LAST:event_btnOpenOutputFolderActionPerformed

    private void jTextFieldPathInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPathInputKeyReleased
        checkColorTextFieldsConfig();
    }//GEN-LAST:event_jTextFieldPathInputKeyReleased

    private void jTextFieldPathOutputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPathOutputKeyReleased
        checkColorTextFieldsConfig();
    }//GEN-LAST:event_jTextFieldPathOutputKeyReleased

    private void bntSaveConfigFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bntSaveConfigFocusLost
        jLabelMessageResultSaveConfig.setText("");
    }//GEN-LAST:event_bntSaveConfigFocusLost

    private void bntSaveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSaveConfigActionPerformed
        saveConfigToFile();
    }//GEN-LAST:event_bntSaveConfigActionPerformed

    // Abre una ventana para seleccionar un directorio y devuelve una cadena
    // con la ruta absoluta.
    private String selectPathDirectory(){
        String path = "";
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setPreferredSize(new Dimension(600, 500));
        
        if (pathDirectoryInput.equals("")) {
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        } else {
            fileChooser.setCurrentDirectory(new File(pathDirectoryInput));
        }
        
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int result = fileChooser.showOpenDialog(this);

        // Recupera la ruta del directorio seleccionado
        if (result == JFileChooser.APPROVE_OPTION) {
            File tempFile = fileChooser.getSelectedFile();
            path = tempFile.getAbsolutePath();
        }
        
        return path;
    }
    
    // Inicializa el ComboBox con los meses del año actual
    // El item seleccionado por defecto es el mes actual
    private void initComboBox() {
        SimpleDateFormat dateY = new SimpleDateFormat("YY");
        SimpleDateFormat dateM = new SimpleDateFormat("MM");
        String year = dateY.format(new Date());
        int month = Integer.valueOf(dateM.format(new Date()));

        jComboBoxMonth.addItem("ene" + year);
        jComboBoxMonth.addItem("feb" + year);
        jComboBoxMonth.addItem("mar" + year);
        jComboBoxMonth.addItem("abr" + year);
        jComboBoxMonth.addItem("may" + year);
        jComboBoxMonth.addItem("jun" + year);
        jComboBoxMonth.addItem("jul" + year);
        jComboBoxMonth.addItem("ago" + year);
        jComboBoxMonth.addItem("sep" + year);
        jComboBoxMonth.addItem("oct" + year);
        jComboBoxMonth.addItem("nov" + year);
        jComboBoxMonth.addItem("dic" + year);

        jComboBoxMonth.setSelectedIndex(month - 1);
    }

    private void checkColorTextFieldsConfig() {
        // Primer Patrón
        if (jTextFieldSearchPatterBefore.getText().equals("")) {
            // Cambiar color
            jTextFieldSearchPatterBefore.setBackground(new Color(234, 192, 183));
        } else {
            jTextFieldSearchPatterBefore.setBackground(Color.white);
        }

        // Segundo Patrón
        if (jTextFieldSearchPatterAfter.getText().equals("")) {
            // Cambiar color
            jTextFieldSearchPatterAfter.setBackground(new Color(234, 192, 183));
        } else {
            jTextFieldSearchPatterAfter.setBackground(Color.white);
        }
        
        // Carpeta de Entrada
        if (jTextFieldPathInput.getText().equals("")) {
            // Cambiar color
            jTextFieldPathInput.setBackground(new Color(234, 192, 183));
        } else {
            jTextFieldPathInput.setBackground(Color.white);
        }
        
        // Carpeta de Salida
        if (jTextFieldPathOutput.getText().equals("")) {
            // Cambiar color
            jTextFieldPathOutput.setBackground(new Color(234, 192, 183));
        } else {
            jTextFieldPathOutput.setBackground(Color.white);
        }
    }

    private void saveConfigToFile() {
        // Lee los 4 campos de configuración y los escribe en un fichero txt.
        // Cada campo se guarda en una linea, por separado.
        // En caso de que el campo este vacio, se escribe un salto de línea
        try {
            PrintWriter printWriter = new PrintWriter(PATH_PATTERN_FILE);
            
            // Primer Patrón
            if (!jTextFieldSearchPatterBefore.getText().equals("")) {
                printWriter.println(jTextFieldSearchPatterBefore.getText());
            } else {
                printWriter.println();
            }

            // Segundo Patrón
            if (!jTextFieldSearchPatterAfter.getText().equals("")) {
                printWriter.println(jTextFieldSearchPatterAfter.getText());
            } else {
                printWriter.println();
            }
            
            // Path de la carpeta Origen
            if (!jTextFieldPathInput.getText().equals("")) {
                printWriter.println(jTextFieldPathInput.getText());
            } else {
                printWriter.println();
            }
            
            // Path de la carpeta Destino
            if (!jTextFieldPathOutput.getText().equals("")) {
                printWriter.println(jTextFieldPathOutput.getText());
            } else {
                printWriter.println();
            }

            printWriter.close();
            
            jLabelMessageResultSaveConfig.setText("Configuración guardada con éxito.");
        } catch (IOException e) {
            jLabelMessageResultSaveConfig.setText("Error al guardar la configuración.");
            logTextArea.append("Error al guardar la configuración. \n> " + e.getMessage() + "\n");
        }
    }

    private void readConfigFromFile() {
        File file = new File(PATH_PATTERN_FILE);

        if (file.exists()) {
            try ( BufferedReader fileTxt = new BufferedReader(
                    new FileReader(file))) {
                String line1 = null;
                String line2 = null;
                String line3 = null;
                String line4 = null;

                //Primera linea primer Pattern
                line1 = fileTxt.readLine();
                if (line1 != null) {
                    jTextFieldSearchPatterBefore.setText(line1);
                }

                // Segunda linea segundo Patter
                line2 = fileTxt.readLine();
                if (line2 != null) {
                    jTextFieldSearchPatterAfter.setText(line2);
                }

                // Tercera linea Path carpeta Origen (Para seleccionar el PDF a procesar)
                line3 = fileTxt.readLine();
                if (line3 != null) {
                    jTextFieldPathInput.setText(line3);
                    pathDirectoryInput = line3;
                }

                // Cuarta linea Path carpeta Destino (Donde guardar PDFs procesados)
                line4 = fileTxt.readLine();
                if (line4 != null) {
                    jTextFieldPathOutput.setText(line4);
                    pathDirectoryOutput = line4;
                }
            } catch (Exception e) {
                logTextArea.append("Error al cargar los patrones de busqueda guardados. \n> " + e.getMessage() + "\n");
            }
        } else {
            logTextArea.append("Error > No se encuentra el fichero de configuración.\n");
        }
    }

    // Genera el Path de la carpeta donde se guardan los PDFs separados
    // Genera la cadena con los datos del mes y año que se usa al generar el 
    // nombre fichero de salida. Ej: Apellidos, Nombre abr22.pdf
    private int splitPdfDocument() {
        int numPages = 0;

        try {
            // Se genera el Nombre de Carpeta a partir del mes y año actual
            String userName = System.getProperty("user.name");
            SimpleDateFormat year = new SimpleDateFormat("yyyy");
            int index = jComboBoxMonth.getSelectedIndex() + 1;
            String monthNum = "";

            if (index < 10) {
                monthNum = "0" + index + " ";
            } else {
                monthNum = "" + index + " ";
            }
            // Genera una cadena que empiza por el numero del mes seguido por el nombre del mes
            String month = monthNum + jComboBoxMonth.getSelectedItem().toString().subSequence(0, 3).toString();

            String nameFolder = "C:/Users/" + userName + "/Documents/Nominas/" + year.format(new Date()) + "/" + month;

            // Se usa para asignar la ruta de la carpeta al boton "Abrir Carpeta"
            // De esta forma abrira la carpeta que contiene los documentos procesados
            createdFolderName = nameFolder;

            File outputFilePath = new File(nameFolder);

            // Genera la cadena con el mes y año
            // Se usa al renombrar los arvhivos PDF separados
            String monthSelected = " " + jComboBoxMonth.getSelectedItem().toString();

            try {
                // Divide el PDF
                numPages = pdfManager.splitPdfDocument(selectedFilePath, outputFilePath, monthSelected, searchPatternBefore, searchPatternAfter);
            } catch (Exception ex) {
                logTextArea.append("¡ERROR al ejecutar el método 'splitPdfDocument'! >" + ex.getMessage() + "\n\n");
            }
        } catch (Exception ex) {
            logTextArea.append("¡ERROR desconocido al dividir el PDF! >" + ex.getMessage() + "\n\n");
        }

        return numPages;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntSaveConfig;
    private javax.swing.JButton bntSelectInputFolder;
    private javax.swing.JButton btnOpenOutputFolder;
    private javax.swing.JButton btnSelectFile;
    private javax.swing.JButton btnSelectOutputFolder;
    private javax.swing.JButton btnShowPdfFileText;
    private javax.swing.JButton btnSplitPdfFile;
    private javax.swing.JComboBox<String> jComboBoxMonth;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelMessageResultSaveConfig;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextFieldPathInput;
    private javax.swing.JTextField jTextFieldPathOutput;
    private javax.swing.JTextField jTextFieldSearchPatterAfter;
    private javax.swing.JTextField jTextFieldSearchPatterBefore;
    private javax.swing.JTextArea logTextArea;
    // End of variables declaration//GEN-END:variables
}
